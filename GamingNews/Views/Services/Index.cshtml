@using Kendo.Mvc.UI
@using GamingWeb.Custom.Helpers
@using GamingWeb.Custom.Models
@{
    var language = new LanguageHelper(Context);
    //int servicesAccess = new AuthorizeHelper(Context).GetPrivilegeLevel((int)Views.Services);
}

<script>
    function sync_handler(e) {
        e.sender.read();
    }
</script>
<script>


    function onBeforeEdit(e) {
        $("#gridServices").data("kendoGrid").showColumn("IconPath");
    }

    function onSaveChanges(e) {
        $("#gridServices").data("kendoGrid").hideColumn("IconPath");
    }

</script>

<div class="page-header">
    <div>
        <h2 class="main-content-title tx-24 mg-b-5">@language.Get("Services")</h2>

    </div>

</div>
@(Html.Kendo().Grid<GamingWeb.Custom.Models.Services.Service>()
                .Name("gridServices")
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Hidden(true);
                    columns.Bound(p => p.NameSq).Title(language.Get("NameSQ"));
                    columns.Bound(p => p.NameEn).Title(language.Get("NameEN"));
                    columns.Bound(p => p.NameSr).Title(language.Get("NameSR"));
                    columns.Bound(p => p.Url).Title(language.Get("Url"));
                    columns.Bound(p => p.IconPath).Title(language.Get("IconPath")).Hidden(true);
                    //if (servicesAccess == (int)RoleAccessLevels.FullAccess)
                    //{
                        columns.Command(c => { c.Edit().Text(language.Get("Edit")).UpdateText(language.Get("Save")).CancelText(language.Get("Cancel")); })
                        .Width(250);
                    //}
                })
                .ToolBar(tools =>
                {
                    //if (servicesAccess == (int)RoleAccessLevels.FullAccess)
                    //{
                        tools.Create().Text(language.Get("Add"));
                    //}
                })
                .Editable(editable => editable.Mode(GridEditMode.InLine))
                .Pageable(pager => pager.Refresh(true).PageSizes(new[] { 10, 20, 30, 50 }).Refresh(true))
                .Sortable()
                .Scrollable()
                .Filterable()
                .Resizable(resize => resize.Columns(true))
                .HtmlAttributes(new { style = "height:800px;" })
                .DataSource(dataSource => dataSource
                .Ajax()
                .Events(e => e.Sync("sync_handler"))
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(p => p.Id);

                })
                .Read(read => read.Action("Read_Services", "Services"))
                .Update(update => update.Action("CreateUpdateService", "Services"))
                .Create(create => create.Action("CreateUpdateService", "Services"))
                )
                .Events(e => e.BeforeEdit("onBeforeEdit"))
                .Events(e => e.Cancel("onSaveChanges"))

)
